/*
========================================================================================
    Config file for defining DSL2 per module options and publishing paths
========================================================================================
    Available keys to override module options:
        ext.args            = Additional arguments appended to command in module.
        ext.args2           = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3           = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix          = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    withName: PARABRICKS_FQ2BAM {
        ext.args = '--low-memory'
        cpus = { 
            def cpu_list = [8, 16, 32, 48]
            return task.attempt <= cpu_list.size() ? cpu_list[task.attempt - 1] : 48
        }
        memory = {
            def memory_list = ['28.GB', '58.GB', '122.GB', '186.GB']
            return task.attempt <= memory_list.size() ? memory_list[task.attempt - 1] : '186.GB'
        }
        accelerator = {
            def accelerator_list = [1, 1, 1, 4]
            return task.attempt <= accelerator_list.size() ? accelerator_list[task.attempt - 1] : 4
        }
        time = { check_max( 1.h * task.attempt, 'time' ) }
        maxRetries = 4
        maxForks = (params.batch_size != -1) ? params.batch_size : 24
    }

    withName: PARABRICKS_DEEPVARIANT {
        cpus = { 
            def cpu_list = [8, 16, 32, 48]
            return task.attempt <= cpu_list.size() ? cpu_list[task.attempt - 1] : 48
        }
        memory = {
            def memory_list = ['26.GB', '58.GB', '122.GB', '186.GB']
            return task.attempt <= memory_list.size() ? memory_list[task.attempt - 1] : '186.GB'
        }
        accelerator = {
            def accelerator_list = [1, 1, 1, 4]
            return task.attempt <= accelerator_list.size() ? accelerator_list[task.attempt - 1] : 4
        }
        time = { check_max( 1.h * task.attempt, 'time' ) }
        maxRetries = 4
        maxForks = (params.batch_size != -1) ? params.batch_size : 24
    }
    
    withName: 'TABIX_BGZIPTABIX' {
        cpus   = { check_max( 1 * task.attempt, 'cpus' ) }
        memory = { check_max( 2.GB * task.attempt, 'memory' ) }
        time = { check_max( 1.h * task.attempt, 'time' ) }
        maxRetries = 3
        containerOverride = [
            {
                containerOverrides: [
                    { name: 'AWS::Batch::ContainerProperties', accelerator: 0 }
                ]
            }
        ]
    }

    withName: 'MULTIQC' {
        cpus   = { check_max( 2 * task.attempt, 'cpus' ) }
        memory = { check_max( 8.GB * task.attempt, 'memory' ) }
        time = { check_max( 1.h * task.attempt, 'time' ) }
        maxRetries = 3
        containerOverride = [
            {
                containerOverrides: [
                    { name: 'AWS::Batch::ContainerProperties', accelerator: 0 }
                ]
            }
        ]
    }

}